#!/usr/bin/env dart
// Test de pr√©servation de l'historique lors des changements de param√®tres

import 'dart:collection';

// Simulation simplifi√©e des classes n√©cessaires
class WindSample {
  WindSample({required this.directionDeg});
  final double directionDeg;
}

enum WindTrendDirection { veeringRight, backingLeft, neutral, irregular }

class WindTrendSnapshot {
  WindTrendSnapshot({
    required this.trend,
    required this.linearSlopeDegPerMin,
    required this.supportPoints,
    required this.windowSeconds,
    required this.sensitivity,
  });
  final WindTrendDirection trend;
  final double linearSlopeDegPerMin;
  final int supportPoints;
  final int windowSeconds;
  final double sensitivity;
}

class _TimedDir {
  _TimedDir(this.time, this.dir);
  final DateTime time;
  final double dir;
}

// Version simplifi√©e de WindTrendAnalyzer pour le test
class TestWindTrendAnalyzer {
  TestWindTrendAnalyzer({
    required this.windowSeconds,
    this.analysisWindowSeconds,
    required this.sensitivity,
  });

  final int windowSeconds;
  final int? analysisWindowSeconds;
  final double sensitivity;
  final Queue<_TimedDir> _samples = Queue();
  
  int get effectiveAnalysisWindow => analysisWindowSeconds ?? windowSeconds;
  int get historyCount => _samples.length;

  void addSample(double direction) {
    final now = DateTime.now();
    _samples.add(_TimedDir(now, direction));
    
    // Nettoyage des anciennes donn√©es
    final cutoff = now.subtract(Duration(seconds: windowSeconds));
    while (_samples.isNotEmpty && _samples.first.time.isBefore(cutoff)) {
      _samples.removeFirst();
    }
  }

  TestWindTrendAnalyzer updateParameters({
    int? analysisWindowSeconds,
    double? sensitivity,
  }) {
    final newAnalyzer = TestWindTrendAnalyzer(
      windowSeconds: windowSeconds,
      analysisWindowSeconds: analysisWindowSeconds ?? this.analysisWindowSeconds,
      sensitivity: sensitivity ?? this.sensitivity,
    );
    
    // IMPORTANT : Copier l'historique existant
    newAnalyzer._samples.addAll(_samples);
    
    return newAnalyzer;
  }

  WindTrendSnapshot getSnapshot() {
    return WindTrendSnapshot(
      trend: WindTrendDirection.neutral,
      linearSlopeDegPerMin: 0,
      supportPoints: _samples.length,
      windowSeconds: effectiveAnalysisWindow,
      sensitivity: sensitivity,
    );
  }
}

void main() {
  print("üß™ Test de pr√©servation de l'historique lors des changements de param√®tres\n");
  
  // Cr√©er un analyseur initial (fen√™tre 10 minutes)
  var analyzer = TestWindTrendAnalyzer(
    windowSeconds: 600, // 10 minutes
    analysisWindowSeconds: 300, // Analyse sur 5 minutes
    sensitivity: 0.5,
  );
  
  print("üìä √âtape 1: Accumulation de donn√©es initiales");
  print("   Configuration: fen√™tre=10min, analyse=5min, sensibilit√©=0.5");
  
  // Simuler l'accumulation de donn√©es sur 8 minutes
  final baseTime = DateTime.now();
  for (int i = 0; i < 480; i += 10) { // Toutes les 10 secondes pendant 8 minutes
    final angle = 320.0 + (i / 60.0) * -2.0; // Backing left √† -2¬∞/min
    analyzer.addSample(angle);
  }
  
  var snapshot = analyzer.getSnapshot();
  print("   Apr√®s 8min: ${snapshot.supportPoints} √©chantillons accumul√©s");
  print("   Capacit√© d'analyse: ${analyzer.effectiveAnalysisWindow}s (${(analyzer.effectiveAnalysisWindow/60).toStringAsFixed(1)}min)");
  
  print("\nüîÑ √âtape 2: Changement de param√®tres (SANS perte d'historique)");
  
  // Test 1: Changer la fen√™tre d'analyse √† 2 minutes
  analyzer = analyzer.updateParameters(analysisWindowSeconds: 120); // 2 minutes
  snapshot = analyzer.getSnapshot();
  
  print("   Changement analyse: 5min ‚Üí 2min");
  print("   Historique pr√©serv√©: ${snapshot.supportPoints} √©chantillons (‚úÖ pas de perte)");
  print("   Nouvelle fen√™tre analyse: ${analyzer.effectiveAnalysisWindow}s");
  
  // Test 2: Changer la sensibilit√©
  analyzer = analyzer.updateParameters(sensitivity: 0.8);
  snapshot = analyzer.getSnapshot();
  
  print("   Changement sensibilit√©: 0.5 ‚Üí 0.8");
  print("   Historique pr√©serv√©: ${snapshot.supportPoints} √©chantillons (‚úÖ pas de perte)");
  print("   Nouvelle sensibilit√©: ${analyzer.sensitivity}");
  
  // Test 3: Changer √† une fen√™tre plus large (10 minutes)
  analyzer = analyzer.updateParameters(analysisWindowSeconds: 600); // 10 minutes
  snapshot = analyzer.getSnapshot();
  
  print("   Changement analyse: 2min ‚Üí 10min");
  print("   Historique utilisable: ${snapshot.supportPoints} √©chantillons sur ${analyzer.effectiveAnalysisWindow}s");
  print("   Avantage: analyse imm√©diate sur les ${(snapshot.supportPoints * 10 / 60).toStringAsFixed(1)}min d√©j√† acquises ‚úÖ");
  
  print("\nüéØ Comparaison: Ancien vs Nouveau comportement");
  print("   ‚ùå ANCIEN: Changement param√®tre ‚Üí Nouvel analyseur ‚Üí Perte historique ‚Üí Red√©marrage √† z√©ro");
  print("   ‚úÖ NOUVEAU: Changement param√®tre ‚Üí Mise √† jour param√®tres ‚Üí Historique pr√©serv√© ‚Üí Analyse imm√©diate");
  
  print("\nüí° B√©n√©fices utilisateur:");
  print("   - Changement de 20min ‚Üí 5min: analyse imm√©diate sur 5 derni√®res minutes");
  print("   - Changement de 5min ‚Üí 20min: analyse imm√©diate sur jusqu'√† 20min d'historique");
  print("   - Ajustement sensibilit√©: effet imm√©diat sans attendre nouvelles donn√©es");
  print("   - Exp√©rimentation fluide des param√®tres tactiques");
}